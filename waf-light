#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2005, 2006, 2007 (ita)

"""
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

import os, sys
if 'PSYCOWAF' in os.environ:
	try: import psyco; psyco.full()
	except: pass

VERSION="1.3.0"
REVISION="x"
INSTALL="x"
cwd = os.getcwd()

def decodeAscii85(s):
	out=[]
	app=out.append
	s=''.join(s.split()).replace('z','!!!!!')
	p1,p2=divmod(len(s), 5)
	stop=5*p1
	p3,p4=s[0:stop],s[stop:]

	def u(v, o):
		return ord(v[o])-33

	for i in range(p1):
		o=i*5 # offset
		x=52200625L*u(p3, o)+614125*u(p3, o+1)+7225*u(p3, o+2)+85*u(p3, o+3)+u(p3, o+4)
		x,p=divmod(x,256)
		x,o=divmod(x,256)
		m,n=divmod(x,256)
		app(chr(m)+chr(n)+chr(o)+chr(p))
	if p2:
		while len(p4)<5: p4=p4+'!'
		x=52200625L*u(p4, 0)+614125*u(p4, 1)+7225*u(p4, 2)+85*u(p4, 3)+u(p4, 4)
		x,p=divmod(x,256)
		x,o=divmod(x,256)
		m,n=divmod(x,256)
		app(chr(m))
		if p2>2: app(chr(n))
		if p2>3: app(chr(o))
	return ''.join(out)

# wafdir is needed to parse the command-line arguments or print the version number
wafdir=None # SPECIAL LINE

def uncompress_wafdir(newdir):
	f = open(sys.argv[0], 'rb')
	while 1:
		line = f.readline()
		if not line:
			print "This is a stripped-down waf, there is no wafadmin directory available"
			print "Please set WAFDIR to a directory containing a directory named wafadmin"
			print "Or use the full waf version available freely at http://freehackers.org/~tnagy/waf.html"
			print "\033[91mNo wafadmin: cannot execute anything (error)\033[0m"
			sys.exit(1)
		line=line.rstrip()
		if line=='# ===>BEGIN WOOF<===':
			cnt = f.readline()
			if not cnt:
				print "Corrupted waf (1)"
				sys.exit(1)

			line = f.readline().rstrip()
			if line!='# ===>END WOOF<===':
				print "Corrupted waf (2)"
				sys.exit(1)
			break
	if not cnt:
		print "Corrupted waf (3)"
		sys.exit(1)

	cnt = decodeAscii85(cnt[1:])

	# uncompress wafadmin
	import shutil, tarfile
	try: shutil.rmtree(newdir)
	except OSError: pass
	try: os.makedirs(newdir)
	except OSError:
		print "Could not uncompress waf-local into %s"%newdir
		print "Please install waf system-wide or move waf into a writeable directory"
		sys.exit(1)

	os.chdir(newdir)
	f = open('wafadmin.tar.bz2', 'wb')
	f.write(cnt)
	f.close()

	tar = tarfile.open('wafadmin.tar.bz2')
	for tarinfo in tar:
		tar.extract(tarinfo)
	tar.close()

	# cleanup the tarfile and chdir to the previous directory
	os.chmod('wafadmin', 0755)
	os.chmod('wafadmin'+os.sep+'Tools', 0755)
	os.unlink('wafadmin.tar.bz2')
	os.chdir(cwd)

	global wafdir
	wafdir = newdir

def try_wafdir(dir):
	global wafdir
	if wafdir: return
	try:
		os.stat(os.path.join(dir, 'wafadmin'))
		wafdir = os.path.abspath(dir)
	except OSError:
		pass

def find_wafadmin():
	global wafdir
	name = sys.argv[0]

	# wafadmin may be in $WAFDIR (developers)
	if 'WAFDIR' in os.environ:
		try_wafdir(os.environ['WAFDIR'])
		if wafdir: return

	# waf-light is a special beast
	if name[-5:] == 'light':
		try_wafdir(os.path.dirname(os.path.abspath(name)))
		if wafdir: return
		print "\033[91mwaf-light in use, wafadmin not found -> export WAFDIR=/folder\033[0m"
		sys.exit(1)

	if not wafdir:
		dir = "/lib/waf-%s-%s/" % (VERSION, REVISION)
		for i in [INSTALL, '/usr', '/usr/local', '/opt']:
			try_wafdir(i+dir)
			if wafdir: return

	if wafdir: return

	# look in the directory containing waf
	if sys.platform == 'win32': s='waf-%s-%s'
	else: s='.waf-%s-%s'
	dir = os.path.join(os.path.dirname(os.path.abspath(name)), s % (VERSION, REVISION))
	try_wafdir(dir)
	if wafdir: return

	# not found, uncompress
	wafdir = dir
	uncompress_wafdir(dir)

find_wafadmin()
if "-vv" in sys.argv: print "wafdir is ", wafdir

w = os.path.join(wafdir, 'wafadmin')
t = os.path.join(w, 'Tools')
sys.path = [w, t] + sys.path

import Params, Scripting

Params.g_tooldir = [t]
Params.g_cwd_launch = cwd

if Params.g_version != VERSION:
	Params.fatal('version mismatch waf %s <-> wafadmin %s (wafdir %s)' % (VERSION, Params.g_version, wafdir))

Scripting.prepare()

