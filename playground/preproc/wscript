#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2008 (ita)

# test for looking at dependencies with gcc

VERSION='0.0.1'
APPNAME='cc_test'
srcdir = '.'
blddir = 'build'

import Utils
import preproc
from preproc import NUM, OP, IDENT

def configure(conf):
	conf.check_tool('gcc')

def build(bld):

	defs = {
		'm1'   : "m1 9 + 9",
		'fun0' : "fun0(x, y) x y",
		'fun1' : "fun1(x, y) x ## y",
		'fun2' : "fun2(x) #x",
		'fun3' : "fun3(x, y) x * y",
		'fun4' : "fun4(x) fun2(x)",
		'fun5' : "fun5(x, y, z) x ## y ## z",
		'fun6' : "fun6(x, y) <x.y>",
	}

	def test(x, result, fun=preproc.reduce_tokens):
		toks = preproc.tokenize(x)
		preproc.reduce_tokens(toks, defs, [])
		ret = preproc.stringize(toks)

		if ret == result:
			color = "GREEN"
		else:
			color = "RED"
		Utils.pprint(color, "%s\t\t%r" % (ret, toks))

	test("1 + m1 + 1", "1+9+9+1")
	test("1 + fun0(1, +) 1", "1+1+1")
	test("fun2(mmm)", "mmm")
	test("m1", "9+9")
	test("fun2(m1)", "m1")
	test("fun4(m1)", "9+9")
	test("fun1(m, m)", "mm")
	test("fun5(a, b, c)", "abc")
	test("fun1(>, =)", ">=")
	test("fun1(a, 12)", "a12")
	test("fun5(a, _, 12)", "a_12")
	test("fun6(math, h)", "<math.h>")

	def test(x, result):
		ret = preproc.extract_include(x, defs)
		if ret == result:
			color = "GREEN"
		else:
			color = "RED"
		Utils.pprint(color, "%s" % (ret))

	test("fun6(math, h)", "math.h")

	def test(x, result):
		toks = preproc.tokenize(x)
		preproc.reduce_tokens(toks, defs, [])
		(_, ret) = preproc.reduce_eval(toks)
		if ret == result:
			color = "GREEN"
		else:
			color = "RED"
		Utils.pprint(color, "%s\t\t%r" % (ret, toks))

	test("1+1", "2")
	test("1-1", "0")

	"""
	test("0&&2<3")
	test("(5>1)*6")
	test("1+2+((3+4)+5)+6==(6*7)/2==1*-1*-1")
	test("1,2,3*9,9")
	test("1?77:88")
	test("0?77:88")
	test("1?1,(0?5:9):3,4")
	test("defined inex")
	test("defined(inex)")
	test("m1*3")
	test("7*m1*3")
	test("fun1(m,1)")
	test("fun2(2, fun1(m, 1))")
	#test("foo##.##h")

	gruik = c_parser()
	gruik.strpaths = paths
	gruik.pathcontents = {}

	gruik.start_local(arg)
	print("we have found the following dependencies")
	print(gruik.nodes)
	print(gruik.names)

	#f = open(arg, "r")
	#txt = f.read()
	#f.close()
	#print tokenize(txt)
	"""
