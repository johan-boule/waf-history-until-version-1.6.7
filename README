WHAT YOU WILL FIND HERE
-----------------------

An experimental project called 'waf' (bsd licence: freely redistributable)
Examples can be found in demo/
Tests can be found in wafadmin/ (run ./Test.py and look at the folder wafadmin/test/)

GENERATE WAF
------------

Run './waf-light --make-waf' to generate waf or look at './waf-light --help'

Then try 'waf --help', there are predefined targets for waf itself.

ENVIRONMENT VARIABLES
---------------------

WAFLOCK: name of the lock file (default: .lock-wscript)
WAFDIR: path to the wafadmin folder (developers must set it)
WAFCACHE: path to the target cache (replaces --usecache)

QUICK HOWTO
-----------

Starting a new project with waf:
  Copy the 'waf' script to your project.

  Add sources in a subdirectory (this is how programs are built in real life), and a wscript on the top-level.

Using waf:
  To begin with, have a look at the cpp demo first (demos/cpp):
  * configure with "waf configure"
  * compile with "waf"
  * install with "waf install"
  * create a tarball with "waf dist"
  * clean with "waf distclean"

Creating scripts:
  * The wscript are actually python modules, from which functions with particular namings
  are imported: init, shutdown, configure(conf), build(bld) and set_options(opt)
  * The mandatory functions are configure(conf), build(bld) and set_options(opt)

DEVELOPERS
----------

Developers must set WAFDIR instead of regenerating waf all the time.

PACKAGERS
---------

By default, waf uncompresses itself into its current directory (.waf-version-rev)
The destdir is of course taken into account: "DESTDIR=/tmp/stuff waf install"

SUGGESTED USAGE
---------------

Do not rely on command-line defines, generate a config.h file instead.
Avoid includes having ".." in the path as system headers and folders out
of the project directory could be scanned (can be slow).

---------------------------
Thomas Nagy, 2006, 2007 (ita)

