WHAT YOU WILL FIND HERE
-----------------------

An experimental project called 'waf' (bsd licence: freely redistributable)
Examples can be found in demo/
Tests can be found in wafadmin/ (run ./Test.py and look at the folder wafadmin/test/)

Try 'waf --help' too, there are predefined targets for waf itself.

QUICK HOWTO
-----------

Environment setup:
  For your convenience the script 'aliases.sh' contains useful aliases:
  'source aliases.sh' will set your environment.

Starting a new project with waf:
  Using "waf --make-archive", a small archive containing the minimum waf distribution is generated
  (without examples). Just unpack the archive created in the directory of your folder:
  tar xjvf miniwaf-0.x.x.tar.bz2
    or
  copy the wafadmin/ folder for global use: /usr/lib/wafadmin, /usr/local/lib/wafadmin 
  you might want to look into waf.py for more details on where the wafadmin directory is searched.

  Add sources in a subdirectory (this is how programs are built in real life), and a wscript on the top-level.

Using waf:
  To begin with, have a look at the cpp demo first (demos/cpp):
  * configure with "waf configure"
  * compile with "waf"
  * install with "waf install"
  * create a tarball with "waf dist"
  * clean with "waf distclean"

Creating scripts:
  * The wscript are actually python modules, from which functions with particular namings
  are imported. For more details on the functions to provide have a look at the file DESIGN.
  * In some cases, there is a lot of code and using a build(bld) function is not convenient:
  a file named wscript_build ('wscript_'+function name) will replace the
  corresponding function in the wscript module. See demos/cpp/src2

---------------------------
Thomas Nagy, 2006 (ita)

