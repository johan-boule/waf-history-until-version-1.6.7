<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
>
<chapter>
	<title>C and C++ projects</title>
	<section>
		<title>Canonical declaration for C/C++ applications</title>
		<para>
			The c/c++ builds consist in transforming source files into object files, and to assemble the object files at the end. In theory a single programming language should be sufficient for writing any application, but in practice small variations exist:
			<itemizedlist>
				<listitem>Applications may be divided in dynamic or static libraries</listitem>
				<listitem>Additional files may enter in the link step (libraries, object files)</listitem>
				<listitem>Source files may be generated by other compilers</listitem>
			</itemizedlist>
		The construction of c/c++ applications can be quite complicated, and several measures must be taken to ensure coherent interaction with new compilation rules. The canonical code for a task generator building a c/c++ application is the following:
			<programlisting language="python">
def build(bld):
	tgen = bld.new_task_gen('c', 'program') <co id="taskgen-co" linkends="al"/>
	tgen.source = 'main.c' <co id="src-co" linkends="a2"/>
	tgen.target = 'appname' <co id="tgt-co" linkends="a3"/>
	tgen.includes = '.' <co id="incl-co" linkends="a4"/>
	tgen.install_path = '${SOME_PATH}/bin' <co id="inst-co" linkends="a5"/>
	tgen.defines = 'LINUX=1 BIDULE' <co id="defi-co" linkends="a6"/>
	tgen.ccflags = '-O2 -Wall' <co id="ccflags-co" linkends="a7"/>
			</programlisting>

			<calloutlist>
				<callout arearefs="taskgen-co" id="a1">
					<para>Task generator declaration; each element in the list represent a feature corresponding to a method having the correponding annotation, for example <emphasis>@program</emphasis></para>
				</callout>
				<callout arearefs="src-co" id="a2">
					<para>List of source, it may be either a python list, or a string containing the file names separated with spaces. This list may contain file names of different extensions to make hybrid applications.</para>
				</callout>
				<callout arearefs="tgt-co" id="a3">
					<para>Target name, it is concerted to the name of the binary <emphasis>name.so</emphasis> or <emphasis>name.exe</emphasis> depending on the platform and the features.</para>
				</callout>
				<callout arearefs="incl-co" id="a4">
					<para>List of include paths, it may be either a python list, or a string containing the paths separated by spaces. The paths are used for both the command-line and for finding the implicit dependencies (headers). In general, include paths must be relative to the wscript file and given explicitely. See the preprocessor section for more information.</para>
				</callout>
				<callout arearefs="inst-co" id="a5">
					<para>Installation directory, this is where to install the library or program produced. The <emphasis>${}</emphasis> expression is a reference to a variable to be extracted from <emphasis>tgen.env</emphasis>. By default it is set to ${PREFIX}/bin for programs and ${PREFIX}/lib for libraries. To disable the installation, set it to <emphasis>None</emphasis>.</para>
				</callout>
				<callout arearefs="defi-co" id="a6">
					<para>Command-line defines: list of defines to add to the command-line with the <emphasis>-D</emphasis> prefix. To reduce the size of the command-line, it is possible to use a configuration header, see the following section for more details.</para>
				</callout>
				<callout arearefs="ccflags-co" id="a7">
					<para>Command-line compilation flags, for the c++ language the attribute is called <emphasis>cxxflags</emphasis></para>
				</callout>
			</calloutlist>
		</para>
	</section>

	<section>
		<title>Library interaction (uselib)</title>
		<para>
			To link a library against another one created in the same Waf project, the attribute <emphasis>uselib_local</emphasis> may be used. The include paths, the link path and the library name are automatically exported, and the dependant binary is recompiled when the library changes:
			<programlisting language="python">
def build(bld):
	staticlib = bld.new_task_gen('cc', 'staticlib') <co id="lib-co" linkends="b1"/>
	staticlib.source = 'test_staticlib.c'
	staticlib.target = 'teststaticlib'

	main = bld.new_task_gen('cc', 'program') <co id="prog-co" linkends="b2"/>
	main.source = 'main.c'
	main.target = 'test_c_program'
	main.includes = '.'
	main.uselib_local = 'teststaticlib' <co id="uselib-co" linkends="b3"/>
			</programlisting>

			<calloutlist>
				<callout arearefs="lib-co" id="b1">
					<para>A static library</para>
				</callout>
				<callout arearefs="prog-co" id="b2">
					<para>A program using the static library declared previously</para>
				</callout>
				<callout arearefs="uselib-co" id="b3">
					<para>A list of references to existing libraries declared in the project (either a python list or a string containing the names space-separated)</para>
				</callout>
			</calloutlist>
		</para>
		<para>
			To link an application against various <emphasis>system libraries</emphasis>, several compilation flags and link flags must be given at once. To reduce the maintainance, a system called <emphasis>uselib</emphasis> can be used to give all the flags at the same time:
			<programlisting language="python">
def configure(conf):
	conf.env['CCFLAGS_TEST'] = '-O2' <co id="uselib-vars-co" linkends="c1"/>
	conf.env['LINKFLAGS_TEST'] = '-g'

def build(bld):
	staticlib = bld.new_task_gen('cc', 'staticlib')
	staticlib.source = 'test_staticlib.c'
	staticlib.target = 'teststaticlib'
	staticlib.uselib = 'TEST' <co id="uselib-use-co" linkends="c2"/>
			</programlisting>
			<calloutlist>
				<callout arearefs="uselib-vars-co" id="c1">
					<para>Declare a few variables during the configuration, the variables follow the convention VAR_NAME</para>
				</callout>
				<callout arearefs="uselib-use-co" id="c2">
					<para>Add all the VAR_NAME corresponding to the uselib NAME, which is 'TEST' in this example</para>
				</callout>
			</calloutlist>
			The variables used for c/c++ are the following: STATICLIB, LIB, LIBPATH, LINKFLAGS, RPATH, CXXFLAGS, CCFLAGS, CPPPATH, CPPFLAGS, CXXDEFINES, FRAMEWORK, FRAMEWORKPATH, CXXDEPS. The uselib is similar to the cascading style sheet (CSS) principle.
		</para>
	</section>

	<section>
		<title>Using configuration headers</title>
		<para>
			Adding lots of command-line define values increases the size of the command-line and conceals the useful information (differences). Some projects use headers which are generated during the configuration, they are not modified during the build and they are not installed or redistributed. This system is useful for huge projects, and has been made popular by autoconf-based projects.
		</para>
		<para>
			Writing configuration headers can be performed using the following methods:
			<programlisting language="python">
def configure(conf):
	conf.add_define('LIBF')
	conf.undefine('LIBF')
	conf.add_define('LIBF', 1)
	conf.add_define('LIBF_VERSION', '1.0.2')
	conf.write_config_header('config.h')
			</programlisting>
			The code snipped will produce the following <emphasis>config.h</emphasis> in the build directory:
			<programlisting language="sh">
build/
|-- c4che
|   |-- build.config.py
|   `-- default.cache.py
|-- config.log
`-- default
    `-- config.h
			</programlisting>
			The contents of the config.h for this example are
			<programlisting language="c">
/* Configuration header created by Waf - do not edit */
#ifndef _CONFIG_H_WAF
#define _CONFIG_H_WAF

/* #undef NOLIBF */
#define LIBF 1
#define LIBF_VERSION "1.0.2"

#endif /* _CONFIG_H_WAF */
			</programlisting>
		</para>
	</section>

	<section>
		<title>The include system</title>
		<para>
			Include paths are used by the c/c++ compilers for finding the headers. Though some compilers (gcc) can use the folder of the source file for finding other includes implicitely, Waf requires the explicit list of the include paths. When one header changes, the files are recompiled automatically.
		</para>

		<para>
			Waf uses a preprocessor written in Python for finding the headers. By default the preprocessing is limited to the paths within the project. To enable the preprocessor to find system headers, use the following code:
			<programlisting language="python">
import preproc
preproc.go_absolute = 1
			</programlisting>
		</para>
	</section>

</chapter>

