<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
>
<chapter>
	<title>The configuration system</title>

	<section>
		<title>Overview of the configuration files</title>
		<para>
			Configuring a project consists in finding the parameters that will be used during the build step
			<programlisting language="python">
$ cd demos/simple_scenarios/init
$ cat wscript

VERSION='0.0.1'
APPNAME='test'
srcdir = '.'
blddir = 'build'

def set_options(opt):
        pass
def configure(conf):
        pass
def build(bld):
        pass
def shutdown():
        pass

$ waf configure
			</programlisting>
			Several configuration files are produced and the configuration parameters are stored in the folder <emphasis>c4che</emphasis> located under the build directory
			<programlisting language="sh">
|-- .lock-wscript <co id="lock-co" linkends="lock"/>
`-- build
    |-- .wafpickle-6 <co id="pickle-co" linkends="pickle"/>
    |-- c4che
    |   |-- build.config.py <co id="bldconf-co" linkends="bldconf"/>
    |   `-- default.cache.py <co id="env-co" linkends="env"/>
    `-- config.log <co id="log-co" linkends="log"/>
			</programlisting>
			<calloutlist>
				<callout arearefs="lock-co" id="lock">
					<para>Contains a reference to the build directory and contains the command-line configuration flags. It is located at the root of the source directory.</para>
				</callout>
				<callout arearefs="pickle-co" id="pickle">
					<para>Contains serialized data corresponding to the build information (cache, filesystem representation, etc)</para>
				</callout>
				<callout arearefs="bldconf-co" id="bldconf">
					<para>Contains the Waf version and the list of Waf modules to open automatically</para>
				</callout>
				<callout arearefs="env-co" id="env">
					<para>Represents a configuration context (parameters such as configuration flags used during the build)</para>
				</callout>
				<callout arearefs="log-co" id="log">
					<para>Contains the configuration test execution details</para>
				</callout>
			</calloutlist>
			The file <emphasis>default.cache.py</emphasis> is called a configuration context, and it may be edited by hand. We will give the details on the following section. The other files are not meant to be modified by hand, even if they are editable.
		</para>
	</section>

	<section>
		<title>The configuration contexts</title>
		<para>
			The build phase uses configuration contexts created during the configuration phase. The configuration contexts are <emphasis>Python dicts</emphasis> which map keys to values. The configuration context files created take the following form:
			<programlisting language="python">
$ cat build/c4che/default.cache.py
CXXFLAGS = ['-O2', '-Wall']
			</programlisting>
		</para>
		<para>
			By default, the conf object comes with a default built-in configuration context:
			<programlisting language="python">
def configure(conf):
	conf.env.append_value('CXXFLAGS', '-O2')
			</programlisting>
			To replace the default configuration context, a new one must be created and assigned:
			<programlisting language="python">
def configure(conf):
	conf.env.append_value('CXXFLAGS', '-O2')
	env2 = conf.env.copy() <co id="dup-co" linkends="dup"/>
	conf.set_env_name('debug', env2) <co id="name-co" linkends="name"/>
	conf.setenv('debug') <co id="repl-co" linkends="repl"/>
	conf.env.append_value('CXXFLAGS', '-g') <co id="mod-co" linkends="mod"/>
			</programlisting>
			<calloutlist>
				<callout arearefs="dup-co" id="dup">
					<para>Duplicates the default configuration context</para>
				</callout>
				<callout arearefs="name-co" id="name">
					<para>Binds the configuration context to the name 'debug'</para>
				</callout>
				<callout arearefs="repl-co" id="repl">
					<para>Replaces the default configuration context by the 'debug' one</para>
				</callout>
				<callout arearefs="mod-co" id="mod">
					<para>Changes the CXXFLAGS entry in the 'debug' configuration context</para>
				</callout>
			</calloutlist>
			In the previous example, the file contents will be:
			<programlisting language="sh">
$ tree build
`-- build
    |-- c4che
    |   |-- default.cache.py
    |   |-- debug.cache.py

$ cat build/c4che/default.cache.py
CXXFLAGS = ['-O2']

$ cat build/c4che/debug.cache.py
CXXFLAGS = ['-g']
			</programlisting>
		</para>
		<para>
			To use the values in the build section, use <emphasis>bld.env_of_name</emphasis>
			<programlisting language="python">
def build(bld):
	print bld.env_of_name('default')['CXXFLAGS']
	print bld.env_of_name('debug')['CXXFLAGS']
			</programlisting>
		</para>
	</section>

	<section>
		<title>Adding new configuration checks</title>
		<para>
			Explain the @conf decorator
		</para>
	</section>
</chapter>

