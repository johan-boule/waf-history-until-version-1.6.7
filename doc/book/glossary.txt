<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" >


<glossary id="glossary">
	<title>Glossary
	<para>
	Waf essential terms
	</para>

	<!--glossdiv>
		<title>E
		<glossentry id="xml">
			<glossterm>Extensible Markup Language</glossterm>
			<acronym>XML</acronym>
			<glossdef>
				<para>Some reasonable definition here.</para>
				 glossseealso otherterm="sgml"
			</glossdef>
		</glossentry>
	</glossdiv>-->

	<glossentry>
		<glossterm>Task Generator</glossterm>
		<glossdef>
			<para>
				A task generator is an object instance of the class Task.task_gen. The task generators encapsulate the creation of various task instances at a time, and simplify the creation of ordering constraints between them (for example, compilation tasks are executed before link tasks).
			</para>
		</glossdef>
	</glossentry>


	<glossentry>
		<glossterm>Task</glossterm>
		<glossdef>
			<para>
				A Waf task is an object instance of the class Task.TaskBase. Waf tasks may be simple (Task.TaskBase) or related to the filesystem (Task.Task). Tasks represent the production of something during the build (files in general), and may be executed in sequence (with ordering constraints) or in parallel.
			</para>
		</glossdef>
	</glossentry>


	<glossentry>
		<glossterm>Tool</glossterm>
		<glossdef>
			<para>
				A Waf tool is a python module containing Waf-specific extensions. The Waf tools are located in the folder `wafadmin/Tools/` and usually contain a global variable 'detect' which may reference functions to execute in the configuration.
			</para>
		</glossdef>
	</glossentry>

</glossary>

