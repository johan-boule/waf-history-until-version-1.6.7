<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
>
<chapter>
	<title>The Waf architecture</title>
	<section>
		<title>The core library</title>
		<para>
			Waf is based on 12 modules which constitute the core library:
<table>
<title>The core library</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>

<colspec colname='c1'/>
<colspec colname='c2'/>

<thead>
<row>
  <entry>Module</entry>
  <entry>Role</entry>
</row>
</thead>

<tbody>

<row>
  <entry>Build</entry>
  <entry>Defines the build context class, which holds the data for one build (paths, configuration data)</entry>
</row>

<row>
  <entry>Configure</entry>
  <entry>Contains the configuration context class, which is used for launching configuration tests, and the extension system</entry>
</row>

<row>
  <entry>Constants</entry>
  <entry>Provides the constants used in the project</entry>
</row>

<row>
  <entry>Environment</entry>
  <entry>Contains a dictionary class which supports a lightweight copy scheme and provides persistence services</entry>
</row>

<row>
  <entry>Logs</entry>
  <entry>Provide a logging system</entry>
</row>

<row>
  <entry>Node</entry>
  <entry>Contains the filesystem representation class</entry>
</row>

<row>
  <entry>Options</entry>
  <entry>Provides a custom command-line option processing system based on optparse</entry>
</row>

<row>
  <entry>Runner.py</entry>
  <entry>Contains the task execution system (threaded producer-consumer)</entry>
</row>

<row>
  <entry>Scripting.py</entry>
  <entry>Constitutes the entry point of the Waf application, use the command-line for launching the configuration, the build, etc</entry>
</row>

<row>
  <entry>TaskGen</entry>
  <entry>Provide the task generator system, and its extension system based on method addition</entry>
</row>

<row>
  <entry>Task</entry>
  <entry>Contains the task classes, and the task containers.</entry>
</row>

<row>
  <entry>Utils</entry>
  <entry>Contains the support functions and classes re-used in other Waf modules</entry>
</row>


</tbody>
</tgroup>
</table>
	</para>

	<para>
		The essential classes from the core library are represented on the following diagram:
		<graphic format="png" fileref="classes.png" align="center"/>
	</para>

	</section>

	<section>
		<title>Build context</title>
		<para>
			Executing tasks, accessing the file system and consulting the results of a previous build are very different concerns which have to be encapsulated properly. The core class representing a build is a build context
		</para>
	</section>

	<section>
		<title>Build context instances</title>
		<para>
			Executing tasks, accessing the file system and consulting the results of a previous build are very different concerns which have to be encap
sulated properly. The core class representing a build is a build context.
		</para>
		<sect2>
			<title>Build context and tasks</title>
			<para></para>
		</sect2>
		<sect2>
			<title>Nodes, task signatures and persistency</title>
			<para></para>
		</sect2>
		<sect2>
			<title>Parallelization concerns</title>
			<para>In previous Waf versions, the build context was used as a singleton for the following reasons:
				<itemizedlist>
					<listitem></listitem>
					<listitem>Additional files may enter in the link step (libraries, object files)</listitem>
					<listitem>Source files may be generated by other compilers</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</section>

	<section>
		<title>Organization of the task generation</title>
		<para>
		</para>
		<sect2>
			<title>Task instantiation</title>
			<para></para>
		</sect2>
		<sect2>
			<title>Task manager and task groups</title>
			<para></para>
		</sect2>
	</section>

</chapter>

