<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
>
<chapter>
	<title>The Waf architecture</title>
	<section>
		<title>The core library</title>
		<para>
			Waf is based on 12 modules which constitute the core library:
<table>
<title>The core library</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>

<colspec colname='c1'/>
<colspec colname='c2'/>

<thead>
<row>
  <entry>Module</entry>
  <entry>Role</entry>
</row>
</thead>

<tbody>

<row>
  <entry>Build</entry>
  <entry>Defines the build context class, which holds the data for one build (paths, configuration data)</entry>
</row>

<row>
  <entry>Configure</entry>
  <entry>Contains the configuration context class, which is used for launching configuration tests, and the extension system</entry>
</row>

<row>
  <entry>Constants</entry>
  <entry>Provides the constants used in the project</entry>
</row>

<row>
  <entry>Environment</entry>
  <entry>Contains a dictionary class which supports a lightweight copy scheme and provides persistence services</entry>
</row>

<row>
  <entry>Logs</entry>
  <entry>Provide a logging system</entry>
</row>

<row>
  <entry>Node</entry>
  <entry>Contains the filesystem representation class</entry>
</row>

<row>
  <entry>Options</entry>
  <entry>Provides a custom command-line option processing system based on optparse</entry>
</row>

<row>
  <entry>Runner.py</entry>
  <entry>Contains the task execution system (threaded producer-consumer)</entry>
</row>

<row>
  <entry>Scripting.py</entry>
  <entry>Constitutes the entry point of the Waf application, use the command-line for launching the configuration, the build, etc</entry>
</row>

<row>
  <entry>TaskGen</entry>
  <entry>Provide the task generator system, and its extension system based on method addition</entry>
</row>

<row>
  <entry>Task</entry>
  <entry>Contains the task classes, and the task containers.</entry>
</row>

<row>
  <entry>Utils</entry>
  <entry>Contains the support functions and classes re-used in other Waf modules</entry>
</row>


</tbody>
</tgroup>
</table>
	</para>

	<para>
		The essential classes from the core library are represented on the following diagram:
		<graphic format="png" fileref="classes.png" align="center"/>
	</para>

	</section>

	<section>
		<title>Build context instances</title>
		<para>
			Executing tasks, accessing the file system and consulting the results of a previous build are very different concerns which have to be encap
sulated properly. The core class representing a build is a build context.
		</para>
		<sect2>
			<title>Build context and persistency</title>
			<para>
				The build context holds all the information necessary for a build. To accelerate the startup, a part of the information is stored and loaded between the runs. The persistent attributes are the following:
<table>
<title>Build context persistency</title>

<tgroup cols='2' align='left' colsep='1' rowsep='1'>

<colspec colname='c1'/>
<colspec colname='c2'/>

<thead>
<row>
  <entry>Attribute</entry>
  <entry>Information</entry>
</row>
</thead>

<tbody>

<row>
  <entry>root</entry>
  <entry>Node representing the root of the filesystem</entry>
</row>
<row>
  <entry>srcnode</entry>
  <entry>Node representing the source directory</entry>
</row>
<row>
  <entry>bldnode</entry>
  <entry>Node representing the build directory</entry>
</row>
<row>
  <entry>node_sigs</entry>
  <entry>File hashes (dict mapping Node ids to hashes)</entry>
</row>
<row>
  <entry>node_deps</entry>
  <entry>Implicit dependencies (dict mapping Node ids)</entry>
</row>
<row>
  <entry>raw_deps</entry>
  <entry>Implicit file dependencies which could not be resolved (dict mapping Node ids to lists of strings)</entry>
</row>
<row>
  <entry>task_sigs</entry>
  <entry>Signature of the tasks previously run (dict mapping a Task id to a hash)</entry>
</row>
<row>
  <entry>id_nodes</entry>
  <entry>Sequence for generating unique node instance ids (id of the last Node created)</entry>
</row>

</tbody>
</tgroup>
</table>
			</para>
		</sect2>
		<sect2>
			<title>Build context access</title>
			<para>
				In previous Waf releases, the build context was supposed to be a unique object (one build active at a time). To enable the use of Waf as a library, the dependency on the singleton <emphasis>Build.bld</emphasis> was removed. This implies that each object should be able to obtain its build context from its attributes. Here are a few examples:
<table>
<title>Build context access</title>

<tgroup cols='2' align='left' colsep='1' rowsep='1'>

<colspec colname='c1'/>
<colspec colname='c2'/>

<thead>
<row>
  <entry>Object type</entry>
  <entry>Build context access</entry>
</row>
</thead>

<tbody>

<row>
  <entry>Node</entry>
  <entry>self.__class__.bld</entry>
</row>
<row>
  <entry>task_gen</entry>
  <entry>self.bld</entry>
</row>
<row>
  <entry>Task</entry>
  <entry>self.generator.bld</entry>
</row>

</tbody>
</tgroup>
</table>
			</para>
		</sect2>
		<sect2>
			<title>Parallelization concerns</title>
			<para>
				Build contexts perform a <emphasis>os.chdir</emphasis> call before starting to execute the tasks. When running build contexts within build contexts (tasks), the current working directory may cause various problems. To work around them, it may be necessary to inject code (replace bld.compile) and to change the compilation rules (compile from the filesystem root).
			</para>
			<para>
				Direct <emphasis>Node</emphasis> instances are not used anywhere in the Waf code. Instead, each build context creates a new Node subclass (bld.node_class), on which the build context instance is attached as a class attribute.
			</para>
		</sect2>
	</section>

	<section>
		<title>Organization of the task generation</title>
		<para>
		</para>
		<sect2>
			<title>Task instantiation</title>
			<para></para>
		</sect2>
		<sect2>
			<title>Task manager and task groups</title>
			<para></para>
		</sect2>
	</section>

</chapter>

