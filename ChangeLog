NEW IN WAF 1.5.3
----------------
* progress bar fixes with variants and with -pp (ide output)
* enable libraries using only add_objects (no sources)
* let the digest written in the waf file match the digest of the binary archive
* windows: use shutil.move instead of os.rename
* load modules only once
* add -pthread flags for python extensions on FreeBSD
* show how to build swig extensions besides embedded interpreters
* fix the installation of kde4 locale files
* uselib local fixes
* minor optimizations
* demo scripts improvements (cc, cxx)
* warn for invalid or missing features
* raise an exception for the use of install_files and install_as with 1.4 apis
* remove the remaining Build.bld calls from the Waf library (safer for tests)
* execute all external programs with a default current working directory to avoid mistakes

NEW IN WAF 1.5.2
----------------
* guard for unexpected interruptions (pickle file consistency)
* make nasm output files more robust to collisions
* minor osx fixes (add the flags -undefined dynamic_lookup)
* pkg-config fixes
* fix the qt4 detection for multiple installations
* include processing fixes
* remove the default include paths (unresolved dependencies)

NEW IN WAF 1.5.1
----------------
* installing python files works once again
* let the python tool configure with c++
* the waf preprocessor parses macros without parameters
* -Wl,-rpath, <- two commas
* framework variable processing in osx.py
* shared libraries with version numbers are symlinked into the build directory
* handle the absolute paths in includes as intended
* no more deadlock when an exception occurs in post_run
* waf dist does not pack the temporary waf directory anymore
* minor bugfixes for java, ocaml, kde4
* the boost tool is back
* swig demo
* doxygen+tar demo

NEW IN WAF 1.5.0
----------------
* the module Common was removed
* the modules UnitTest and DirWatch have been moved to Tools/
* bld.create_obj -> bld.new_task_gen
* bld.create_obj('cpp', 'program') -> bld.new_task_gen('cxx', 'program')
* bld.env() -> bld.env
* conf.test.uselib -> conf.test.uselib_store, "uselib" now has the same
meaning in configuration and build)
* the helper functions have been moved to Utils.py
* Task_gen.g_allobj -> bld.all_task_gen or Params.g_build.all_task_gen
* The old priority system was removed
* m_tstamp_variants -> node_sigs
* bld_sigs -> task_sigs
* the method for scanning implicit dependencies is Task::scan(self) -> (nodes, text)
* implicit dependencies are indexed by Task::unique_id(self)
* The module Params disappears
* Params.g_autoconfig -> Configure.autoconfig
* Params.pprint -> Utils.pprint
* Params.g_options -> Options.options
* Params.g_commands -> Options.commands
* Params.g_build -> Build.bld
* Build.bld.m_scanned_folders -> Build.bld.cache_scanned_folders
* Build.bld.m_allenvs -> Build.bld.all_envs
* Node: find_build -> find_or_declare
* Node: find_source -> find_resource
* Node: find_resource_lst, find_or_declare_lst, ensure_dir_node_from_path_lst, find_dir_lst disappear
* Runner: Runner.exec_command -> Utils.exec_command
* Runner: Runner.printout -> bld.printout
* Remove m_ from all variables
* installation api simplification
* remove the configuration cache
* the -k behaviour was restored (keep running after errors)
* new interfaces for custom error handling
* new interfaces for reordering the tasks before executing them (scheduling constraints)
* modification of the installation system: use foo.install_path = '${PREFIX}/bin' instead of inst_var and inst_dir
* Configure.Configure -> Configure.ConfigurationContext
* Build.Build -> Build.BuildContext
* detect the amount of cpus automatically
* preprocessor improvements (implicit include paths)
* configuration api refactoring (c/c++)
* The Waf binary size has been reduced by 25%
* Functional syntax is enabled for all task generators
* Stable apis for the 1.5.x series
* Documentation in the Waf book

NEW IN WAF 1.4.3
----------------
* elimination of the Action classes
* quote '%' characters in subst_obj
* boost module improvements
* two new dependency algorithms
* automatic dependency computation (task chaining)

NEW IN WAF 1.4.2
----------------
* updated documentation (waf.pdf)
* new examples (demos/simple_scenarios/)
* node system bugfixes
* compile multiple vala files at the same time
* optimization of the method clone()

NEW IN WAF 1.4.1
----------------

* the gnome help installation is finally correct
* java support improvements
* in qt4 projects, dependencies are added on files listed in the qrc
* object extensions uses a new scheme to avoid conflicts
* optional dependency tracking on headers out of the build directory (bug:132)
* set the c language extension to ".c" only
* bash completion
* installation system fixes

NEW IN WAF 1.4.0
----------------

* various optimizations - see http://freehackers.org/~tnagy/bench.txt
* new system for adding methods dynamically (extend c/c++ builders)
* export_incdirs will add the folders when linking against libraries given in uselib_local
* the type 'plugin' disappears, the c/c++ types are staticlib,program,shlib
* configuration modules simplification (gcc, g++, ..)
* the configuration details are written to config.log
* the configuration defines are written in order of declaration
* the configuration process can be modified dynamically
* autoconfiguration no longer loses the command-line options
* clone no longer clashes with uselib_local

