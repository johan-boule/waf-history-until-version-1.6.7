Waf 1.6
-------

The points listed with a '+' indicate potential sub-projects (contributions will be welcome)

General

- provide Program, Shlib, Staticlib functions?

- give the pkg-config binary path
- global module repository to avoid re-doing "import"
- refactor the environment thing
- cc_root.py rewrite to reduce the amount of methods (flags processing, os fixes)
- unification uselib / uselib_local / objects -> attribute 'uses'?
- new global variable uselib_vars and generalization of uselib for all kinds of task generators
- cache the configuration test results for multiple calls
- no shell for execution
+ CMake file interpreter
+ multiprocess for distributed compilation (vs threads?)

Ideas

- how to enable different scripting systems?
- bind declare chain to the build context and to individual functions
- build context generalization to tasks and task generators?
- Post the task generators by groups or as a whole (delegate to the task manager)
- support for // configurations
- better apis for the shell compilation in Task.py

Configuration
- use configuration names to avoid [env.copy(), conf.setenv, ...]
+ autoconf-like configuration library?

Docs
- show a complete example of c compilation with rules vs task generator code (procedural vs object-oriented)
- enable magic operations by default - unless users do not need them (bld.use_the_magic(), etc)
+ enable a Vigor-like mode to print suggestions (i.e. no task generators => print warnings, no build dir => print warnings)

