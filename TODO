Waf 1.6
-------

The points listed with a '+' indicate potential sub-projects (contributions will be welcome)

General
- os.environ control during task execution
- debug builds (step-by-step execution + scheduler changes)
- cc_root.py rewrite to reduce the amount of methods (header processing, flags processing, os fixes)
- unification uselib / uselib_local / objects
- new global variable uselib_vars and generalization of uselib for all kinds of task generators
- cache the configuration test results for multiple calls
- better Node apis
- no shell for execution
+ CMake file interpreter
+ multiprocess for distributed compilation (vs threads?)

API/Syntax
- bld.ant_glob -> bld.find
- use foo.env.VAR instead of foo.env["VAR"]?
- conf.env -> conf.cfg

Configuration
- use configuration names to avoid [env.copy(), conf.setenv, ...]
- make optional parameters really optional (source dir, build dir, ...)
+ autoconf-like configuration library?

Docs
- show a complete example of c compilation with rules vs task generator code (procedural vs object-oriented)
- enable magic operations by default - unless users do not need them (bld.use_the_magic(), etc)
+ enable a Vigor-like mode to print suggestions (i.e. no task generators => print warnings, no build dir => print warnings)

