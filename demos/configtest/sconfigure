#! /usr/bin/env waf configure
# Ralf Habacker 2006

# To comment add a '#' to the line
# Options to add MUST fit on a single line
add_option('--prefix', type='string', help='installation prefix', dest='prefix')
add_option('--destdir', type='string', help='destination for install (when creation rpms or debs)', dest='destdir')
Params.set_trace(1,1,1)

print "example for config.h support" 

# create a config instance 
conf = Configure.Configure()

# check for the g++ compiler 
conf.checkTool('g++')

# set defines by hand, these are usefull for non standard settings in a check...() result
conf.addDefine('HAVE_XYZ_H',1)
conf.addDefine('HAVE_STRCPY',1)
conf.addDefine('HAVE_XYZ',1)
conf.addDefine('HAVE_SSS',0)
conf.addDefine('HAVE_ZZZ',0)


# use the result of a check for additional config.h settings 
# this check results in two definitions if string.h is available: HAVE_STRING=1 and HAVE_MY_STRING=3
if conf.checkHeader('string.h'):
	conf.addDefine('HAVE_MY_STRING',3)


# override the default builtin rule for the config define
conf.checkHeader('test.h','HAVE_SPECIFIC_TEST_H')

# check a function and set a define according the builtin rules e.g. HAVE_MALLOC
conf.checkFunction('malloc')

# override the default builtin rule for defines
conf.checkFunction('strlen','','HAVE_MY_OWN_STRLEN_DEFINE')

# dito using variable name 
conf.checkFunction('strcpy',define='HAVE_MY_OWN_STRCPY_DEFINE')

# search for a library in standard pathes 
# Q: How to support the uselib attribute 
conf.checkLibrary('z','compress')

#will not found
conf.checkLibrary('bzip','compress')

# ... may be by this 
conf.checkModule('bz2')

# write definitions to the file 'config.h' in the build dir 
conf.writeConfigHeader('config.h')

# save settings detected in the configure process in a cache file 
conf.store('main.cache.py')

print
print
print "content of config.h" 
print
myfile = open('config.h', 'r')

while 1:
	lineStr = myfile.readline()
	if not(lineStr):
	  break
	
	print lineStr.rstrip()
    
myfile.close()

