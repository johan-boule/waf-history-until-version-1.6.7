#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2008 (ita)

VERSION='0.0.1'
APPNAME='simple_tool'
srcdir = '.'
blddir = 'build'

import TaskGen
TaskGen.declare_chain(
	name = 'a',
	action = '${COPY} ${SRC} ${TGT}',
	ext_in = '.input',
	ext_out = '.a',
)

TaskGen.declare_chain(
	name = 'b',
	action = '${COPY} ${SRC} ${TGT}',
	ext_in = '.a',
	ext_out = '.b',
)

TaskGen.declare_chain(
	name = 'c',
	action = '${COPY} ${SRC} ${TGT}',
	ext_in = '.b',
	ext_out = '.c',
	reentrant = 0 # <<- this means the files produced are not reinjected as sources
)

from TaskGen import feature, before, taskgen
import Task

@taskgen
@feature('*')
@before('apply_core')
def exec_rule(self):
	if not getattr(self, 'rule', None):
		return

	name = self.target
	cls = Task.simple_task_type(name, self.rule)

	tsk = self.create_task(name)
	tsk.inputs=[self.path.find_resource(x) for x in self.to_list(self.source)]
	tsk.outputs=[self.path.find_or_declare(x) for x in self.to_list(self.target)]


def set_options(opt):
	pass

def configure(conf):
	import os
	conf.env['COPY'] = os.getcwd() + os.sep + "cp.py"


def build(bld):
	bld.new_task_gen(source='uh.input')
	bld.new_task_gen(source='uh.input', target='test.k',
		rule='cd ${SRC[0].parent.abspath()} && ./create.py && mv ${TGT[0].abspath()} ${TGT[0].abspath(env)}')

	#foo = TaskGen.task_gen()
	#foo.source = "uh.coin"

