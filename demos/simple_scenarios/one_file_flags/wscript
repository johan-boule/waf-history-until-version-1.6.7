#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2008 (ita)
# Yinon Ehrlich, 2009

VERSION='0.0.1'
APPNAME='test'
srcdir = '.'
blddir = 'build'

"""
Access the task after it is created, and modify its flags.

Run with "waf -v" to see the differences:
* All files are compiled without DEFINES, but B.c
* All files are compiled with '-g', but A.c

An easier solution is to create two distinct task generators,
and add the object files from the first to the second.
"""

from TaskGen import after, feature
@after('apply_lib_vars')
@feature('cc')
def add_flags(self):
	for task in self.compiled_tasks:
		if task.inputs:
			node = task.inputs[0]
			if node.name == 'B.c':
				# Copy the original environment -
				# avoid the following change to affect the whole build.
				task.env = task.env.copy()

				# Do not modify the list directly (e.g. append) -
				# will change the source environment as well.
				# Instead, use the safe API supplied by the Environment class:
				# append_unique, append_value or prepend_value.
				task.env.append_unique('_CCDEFFLAGS', '-DMYFLAG')

@after('apply_lib_vars')
@feature('cc')
def remove_flags(self):
	for task in self.compiled_tasks:
		if task.inputs:
			node = task.inputs[0]
			if node.name == 'A.c':
				task.env = task.env.copy()
				# Using list.remove(), as no API like safe_remove.
				# To make sure it won't affect enviroments of other tasks/task generators
				# env.detach must be used to force deep copy.
				task.env.detach()
				ccflags = task.env.CCFLAGS
				ccflags.remove('-g')
				task.env.CCFLAGS = ccflags

def configure(conf):
	conf.check_tool('gcc')
	conf.env.CCFLAGS = ['-g']

def build(bld):
	bld.new_task_gen(
		features = 'cc cprogram',
		source = 'A.c B.c',
		target= 'pimpam')

