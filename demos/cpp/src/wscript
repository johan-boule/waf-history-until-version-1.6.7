#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

def build(bld):
	import Params
	print "command-line parameter meow is ", Params.g_options.meow

	# 1. A simple program
	obj = bld.createObj('cpp', 'program')
	obj.source='''
	a1.cpp
	b1.cpp b2.cpp
	main.cpp
	'''
	obj.includes='. src'
	obj.target='testprogram'

	# 2. A shared library
	# The extension (.so) is added automatically
	obj = bld.createObj('cpp', 'shlib')
	obj.source='''
	a1.cpp
	b1.cpp b2.cpp
	'''
	obj.includes='. src'
	obj.target='testshlib'
	obj.install_in = 'SOME_INSTALL_DIR'

	# 3. A static library
	# The extension (.a) is added automatically
	obj = bld.createObj('cpp', 'staticlib')
	obj.source='''
	c1.cpp
	'''
	obj.includes='. src'
	obj.target='teststaticlib'

	# 4. Another shared library
	obj = bld.createObj('cpp', 'shlib')
	obj.source='''
	d1.cpp
	'''
	obj.includes='. src'
	obj.target='shlib1'
	obj.want_libtool=1
	obj.vnum='1.2.3'

	# 5. A program that links against shlib1
	obj = bld.createObj('cpp', 'program')
	obj.source='''
	e1.cpp
	'''
	obj.includes='. src'
	obj.uselib='MYPROG'
	obj.useliblocal='./teststaticlib.a ./shlib1.so ./testshlib.so'
	obj.target='program_dyn_linked'

def set_options(opt):
	# options defined if src/ was to be compiled as a standalone module
	opt.add_option('--meow', type='string', help='option hidden in the src module', dest='meow')

def configure(conf):
	print "sub-configuration file called (demo)"

