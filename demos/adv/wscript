#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

# advanced tests
# look in src/ for an example of a new compiler that creates cpp files

# the following two variables are used by the target "waf dist"
VERSION='0.0.1'
APPNAME='adv_test'

# these variables are mandatory ('/' are converted automatically)
srcdir = '.'
blddir = '_build_'

# make sure waf has the version we want
import Utils
Utils.waf_version(mini="0.8.8", maxi="9.9.9")


def build(bld):
	# process subfolders from here
	bld.set_variants(['default', 'variant2'])
	bld.add_subdirs('src complex variant')

	# compile the flex+bison test if available
	if bld.env_of_name('default')['FLEX']:
		bld.add_subdirs('bisonflex')

def package(bld):
	pass

def configure(conf):
	# the 'checks' tool adds new method to the conf object like 'checkEndian' below
	conf.checkTool('checks gcc g++ dang flex bison')

	headers='sys/wait.h fcntl.h sys/ioctl.h sys/time.h unistd.h \
	sys/file.h string.h strings.h ctype.h stdlib.h stdarg.h stdint.h \
	stddef.h sys/socket.h sys/modem.h termios.h sys/filio.h inttypes.h \
	wchar.h direct.h sys/types.h alloca.h libintl.h'
	
	#conf.checkEndian()
	conf.checkFeatures()

	e = conf.create_header_configurator()
	e.mandatory = 1
	e.name = 'stdio.h'
	e.define = 'HAVE_STDIO'
	e.run()

	e = conf.create_library_configurator()
	e.mandatory = 1
	e.name = 'kdecore'
	e.path = ['/opt/kde3/lib']
	e.run()

	e = conf.create_function_enumerator()
	e.mandatory = 1
	e.headers = ['time.h']
	e.include_paths = ['/usr/include']
	e.function = 'mktime'
	e.define = 'MKTIME'
	e.run()

	e = conf.create_program_enumerator()
	e.mandatory = 1
	e.name = 'cat'
	e.run()

	e = conf.create_header_enumerator()
	e.mandatory = 1
	e.name = 'stdio.h'
	e.run()

	e = conf.create_library_enumerator()
	e.mandatory = 1
	e.name = 'png'
	e.run()

	e = conf.create_test_configurator()
	e.mandatory = 1
	e.code = '#include <stdio.h>\nint main() {printf("hello world"); return 0; }\n'
	e.want_message = 1
	e.run()

	conf.check_pkg('libgnome-2.0',        destvar='GNOME',    vnum='32.10.0')



	# pkg-config example - look in src/wscript_build, obj.uselib ..
	conf.check_pkg('glib-2.0', destvar='GLIB', vnum='2.6.0')


def bub():

	"""
	conf.check_header('GL/gl.h', '', '', ['/usr/X11R6/include','/usr/include'])
	"""

	conf.addDefine('HAVE_SOMETHING', 1)

	#conf.checkEndian()
	#conf.checkFeatures()
	
	conf.addDefine('TEST_DEFINE', 345)

	# command-line defines
	conf.env['CXXDEFINES_DEFTEST'] = ['truc=blah', 'boo']

	conf.env['LIB_CALC']='fl'

	# a more complicated check, anything can be put in the following code:
	code = """
#include <stdio.h>
int main()
{
        printf("ahoy");
        return 0;
}"""
	#ret = conf.try_build_and_exec(code) # the method conf.try_build( works too

	#conf.checkMessage('ahoj', '', 'ahoy'==ret) # boolean needed
	#conf.addDefine('AHOJ', ret)

	#conf.find_program_impl('cat', ['/usr/bin', '/bin'])
	pc = conf.create_program_enumerator()
	pc.name  = 'cat'
	pc.paths = ['/usr/bin', '/bin']
	pc.run()


	#conf.check_header('stdio.h')
	#conf.check_header('stdarg.h', 'HAVE_STDARG_H')
	#conf.check_header('dlfcn.h', 'HAVE_DLFCN_H')
	#conf.check_function('printf("a")', define_name="PRINTF_FUN", headers_code='#include <stdio.h>')

	#conf.find_library('X11', ['/usr/lib','/usr/X11R6/lib'], define_name='X11_DIR')

	le = conf.create_library_enumerator()
	le.names = ['X11']
	le.paths = ['/usr/lib','/usr/X11R6/lib']
	#le.define = 'X11_DIR'
	le.run()


	test = conf.create_header_enumerator()
	test.names = ['klocale.h']
	test.paths = ['/usr/local/include', '/usr/include', '/opt/kde3/include/']
	test.run()

	#conf.find_header('klocale.h', ['/usr/local/include', '/usr/include', '/opt/kde3/include/'], define_name='KDE_DIR')

	#conf.detect_library('XCURSOR', 'Xcursor', ['/usr/lib','/usr/X11R6/lib'])
	
	#check for std flags that could be used with obj.uselib = "GLOBAL"
	"""
	conf.env['CCFLAGS_GLOBAL'] = []
	conf.env['CXXFLAGS_GLOBAL'] = []
	if conf.check_flags('-Wno-pointer-sign'):
		conf.env['CCFLAGS_GLOBAL'].append('-Wno-pointer-sign')
		conf.env['CXXFLAGS_GLOBAL'].append('-Wno-pointer-sign')
	if conf.check_flags('-fvisibility=hidden'):
		conf.env['CCFLAGS_GLOBAL'].append('-fvisibility=hidden')
		conf.env['CXXFLAGS_GLOBAL'].append('-fvisibility=hidden')
	if conf.check_flags('-fno-strict-aliasing'):
		conf.env['CCFLAGS_GLOBAL'].append('-fno-strict-aliasing')
		conf.env['CXXFLAGS_GLOBAL'].append('-fno-strict-aliasing')
	"""

	headers='sys/wait.h fcntl.h sys/ioctl.h sys/time.h unistd.h \
	sys/file.h string.h strings.h ctype.h stdlib.h stdarg.h stdint.h \
	stddef.h sys/socket.h sys/modem.h termios.h sys/filio.h inttypes.h \
	wchar.h direct.h sys/types.h alloca.h libintl.h'
	
	#check for headers and append found headers to headers_found
	#so i could be used later

	headers_found = []
	for header in headers.split():
		if not conf.check_header(header):
			headers_found.append(header)


	#check for ALL function in check_for_this using found headers
	check_for_this=[
		['mktime', 'HAVE_MKTIME'], ['timegm', 'HAVE_TIMEGM'], ['gettimeofday', 'HAVE_GETTIMEOFDAY'],
		['select', 'HAVE_SELECT'], ['poll', 'HAVE_POLL'], ['wcrtomb', 'HAVE_WCRTOMB'], ['strchr', 'HAVE_STRCHR'], 
		['strdup', 'HAVE_STRDUP'], ['strstr', 'HAVE_STRSTR'], ['strtol', 'HAVE_STRTOL'], ['strtok', 'HAVE_STRTOK'], 
		['strsep', 'HAVE_STRSEP'], ['asprintf', 'HAVE_ASPRINTF'], ['vasprintf', 'HAVE_VASPRINTF'], 
		['snprintf','HAVE_SNPRINTF'], ['vsnprintf', 'HAVE_VSNPRINTF']
	]
	functionfind = conf.create_function_enumerator()
	functionfind.mandatory = 1
	#functionfind.headers = headers_found
	functionfind.include_paths = ['/usr/include']
	for func in check_for_this:
		functionfind.function_calls = [func]
		functionfind.run()
	code = """
#include <time.h>
struct tm t; t.tm_gmtoff = 0;
"""
	#if conf.TryBuild(code):
	#	conf.addDefine('HAVE_TM_GMTON', 1)

	code = """
#include <sys/time.h>
struct timeval tv; timerisset(&tv); timerclear(&tv); timercmp(&tv, &tv, <);
timeradd(&tv, &tv, &tv); timersub(&tv, &tv, &tv);
"""
	#if conf.TryBuild(code):
	#	conf.addDefine('HAVE_TIMEOPS', 1)

	code = """
#include <termios.h>
struct termios t; cfsetspeed(&t, B9600);
"""
	if 1: #conf.TryBuild(code):
		conf.addDefine('HAVE_CFSETSPEED', 1)
	else:
		code = """
#include <termios.h>
struct termios t; cfsetispeed(&t, B9600);  cfsetospeed(&t, B9600);
"""
		if conf.TryBuild(code):
			conf.addDefine('HAVE_CFSETISPEED', 1)
			conf.addDefine('HAVE_CFSETOSPEED', 1)
		else:
			code ="""
 #include <termios.h>
 struct termios t; t.c_iflag = B9600; t.c_oflag = B9600;
"""
			if conf.TryBuild(code):
				conf.addDefine('HAVE_TERMIOS_CSPEED', 1)

	code = """
#define _XOPEN_SOURCE 500
#include <sys/types.h>
#include <sys/socket.h>
struct msghdr msg; msg.msg_control;
"""
	#if conf.TryBuild(code):
	#	conf.addDefine('HAVE_MSGHDR_MSG_CONTROL', 1)

	code = """
#define  _XOPEN_SOURCE 500

#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main()
{
    char *name = NULL;
    int master, err;
		
    master = open("/dev/ptmx", O_RDWR | O_NOCTTY | O_NONBLOCK);
    if (master >= 0) {
        err = grantpt(master);
        err = err || unlockpt(master);
        if (!err) {
            name = ptsname(master);
        } else {
            exit(-1);
        }
    } else {
        exit(-1);
    }
    close(master);
    exit(0);
}																										
"""
	#if conf.TryBuild(code):
	#	conf.addDefine('USE_UNIX98PTYS', 1)




	headerconf=conf.create_header_configurator()

	# This demonstrates that after testing the specified paths, the compiler is given a chance
	# to see if it can find the header by itself


	headerconf.uselib_name='STDL'
	headerconf.names=['stdlib.h']
	headerconf.paths=['/zapp/brannigan']
	headerconf.run()

	# Finds GL/gl.h

	headerconf.uselib_name='GL'
	headerconf.names=['GL/gl.h']
	headerconf.paths=['/usr/X11R6/include','/usr/include']
	headerconf.run()





	# First column: name of the function
	# Second column (optional): defines to be set in the config.h autogenerated header

	glxprocs=[
		['glXGetProcAddressARB','HAVE_GLX_GLXGETPROCADDRESS_ARB'],
		['glXGetProcAddress','HAVE_GLX_GLXGETPROCADDRESS'],
	]

	functionfind = conf.create_function_enumerator()

	# Tries to find one of the specified functions
	
	functionfind.function_calls = glxprocs
	functionfind.headers = ['GL/glx.h']
	functionfind.include_paths = ['/usr/X11R6/include','/usr/include']
	functionfind.libs = ['GL']
	functionfind.run()





	pkgconf = conf.create_pkgconfig_configurator()

	# Looks for pkg-config package "blah5000" (should fail unless you really have such a package)
	pkgconf.uselib_name = 'BLAH5000'
	pkgconf.name = 'blah5000'
	pkgconf.run()

	# Looks for pkg-config packages "gtkmm-2.4" and sets the uselib variables with name "GTKMM"
	pkgconf.uselib_name = 'GTKMM'
	pkgconf.name = 'gtkmm-2.4'
	pkgconf.run()

	pkgconf.uselib_name = 'BLUETOOTH'
	pkgconf.name = 'bluez'
	if pkgconf.run():
		conf.addDefine('HAVE_BLUETOOTH_BLUEZ', 1)
	
	pkgconf.uselib_name = 'GLIB'
	pkgconf.name = 'glib-2.0'
	pkgconf.run()




	toolconf = conf.create_cfgtool_configurator()

	# Tries to use the "unobtainium-config" tool
	toolconf.uselib_name = 'UNOBTAINIUM'
	toolconf.binary = 'unobtainium-config'
	toolconf.run()

	# Tries to use the "wx-config" tool and passes the resulting libs, cppflags etc. to the WX uselib
	# variables
	toolconf.uselib_name = 'WX'
	toolconf.binary = 'wx-config'
	toolconf.run()




	libconf = conf.create_library_configurator()

	# Looks for the GL lib in the specified directories
	libconf.uselib_name = 'GL'
	libconf.names = ['GL']
	libconf.paths = ['/usr/X11R6/lib','/usr/lib','/usr/local/lib']
	libconf.run()	

	# Looks for one of the specified libs in the directories
	# The first match will be used
	libconf.uselib_name = 'WX_GL'
	libconf.names = ['wx_gtk_gl','wx_gtk2_gl','wx_gtk2u_gl','wx_gtk_gl-2.6','wx_gtk2_gl-2.6','wx_gtk2u_gl-2.6']
	libconf.paths = ['/usr/lib']
	libconf.run()	

	# finally, write the configuration header
	conf.writeConfigHeader('config.h')

	# set a variant called "variant2", with another config.h
	env_variant2 = conf.env.copy()
	env_variant2.set_variant('variant2')
	conf.set_env_name('variant2', env_variant2)

	conf.writeConfigHeader('config.h', env=env_variant2)

def set_options(opt):
	opt.add_option('--someopt', type='string', help='some option', dest='someopt')
	# to use after the command-line is parsed:
	# import Params
	# print Params.g_options.someopt

