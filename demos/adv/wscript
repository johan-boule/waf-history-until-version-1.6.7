#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

# advanced tests
# look in src/ for an example of a new compiler that creates cpp files

# the following two variables are used by the target "waf dist"
VERSION='0.0.1'
APPNAME='adv_test'

# these variables are mandatory ('/' are converted automatically)
srcdir = '.'
blddir = '_build_'

def build(bld):
	# process subfolders from here
	bld.set_variants(['default', 'variant2'])
	bld.add_subdirs('src complex variant')

def package(bld):
	pass

def configure(conf):
	# the 'checks' tool adds new method to the conf object like 'checkEndian' below
	conf.checkTool(['checks', 'gcc', 'g++', 'dang'])

	# pkg-config example - look in src/wscript_build, obj.uselib ..
	conf.checkPkg('glib-2.0', destvar='GLIB', vnum='2.6.0')



	#conf.checkEndian()

	conf.checkFeatures()
	conf.addDefine('TEST_DEFINE', 345)


	# a more complicated check, anything can be put in the following code:
	code = """
#include <stdio.h>
int main()
{
        printf("ahoy");
        return 0;
}
"""
	ret = conf.try_build_and_exec(code) # the method conf.try_build( works too
	conf.checkMessage('ahoj', '', 'ahoy'==ret)
	conf.addDefine('AHOJ', ret)

	conf.find_program('cat', ['/usr/bin', '/bin'])
	conf.check_header('stdio.h')
	conf.check_header('dlfcn.h', 'HAVE_DLFCN_H')
	conf.check_function('printf("a")', define_name="PRINTF_FUN", headers_code='#include <stdio.h>')

	conf.find_library('X11', ['/usr/lib','/usr/X11R6/lib'], define_name='X11_DIR')
	conf.find_header('klocale.h', ['/usr/local/include', '/usr/include', '/opt/kde3/include/'], define_name='KDE_DIR')

	# finally, write the configuration header
	conf.writeConfigHeader('config.h')


	# set a variant called "variant2", with another config.h
	env_variant2 = conf.env.copy()
	env_variant2.set_variant('variant2')
	conf.set_env_name('variant2', env_variant2)
	conf.writeConfigHeader('config.h', env=env_variant2)

def set_options(opt):
	opt.add_option('--someopt', type='string', help='some option', dest='someopt')
	# to use after the command-line is parsed:
	# import Params
	# print Params.g_options.someopt

