#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

# Creates a simple program with a custom compiler:
# ih.coin -> ih.cpp -> ih.o


# This file is not a module, and all the code
# from it will be executed upon compile step
#
# This is really the content of a "def build(bld):" function definition
#
# By contrast, only functions can be defined in a wscript
#

# a program that links using the GLIB library, defined in the configuration
# it also processes coin files, defined in the dang.py module (coin hook)
obj = bld.create_obj('cpp', 'program')
obj.find_sources_in_dirs('. gui')
obj.includes='.'
obj.uselib='GLIB'
obj.target='shlib3'
obj.want_libtool=1
obj.vnum='1.2.3'

# process file.pc.in -> file.pc
obj = bld.create_obj('subst', 'uh')
obj.source = 'test.pc.in'
obj.target = 'test.pc'
obj.dict   = {'LIBS': '-lkdecore', 'LIBICONV': '-lqt-mt', 'XPM_CFLAGS': '-lm', 'VERSION': '1.0', 'XPM_LIBS': '-lxpm'}

# a function to execute in the middle of the build
def print_hello(task):
	print "ahoy"
	return 0

# execute arbitrary code in the middle of the build
obj = bld.create_obj('cmd')
obj.fun = print_hello
obj.prio = 1 # execute this task first

# build dir traversal
bld.add_subdirs('gui gui2')

