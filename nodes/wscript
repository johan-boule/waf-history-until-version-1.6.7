#! /usr/bin/env python3

top = '.'
out = 'bin'

def options(opt):
	return
	print(opt)

def configure(conf):
	pass

def build(bld):

	bld(rule='echo hi')
	bld(rule='touch ${TGT}', target='foo.txt')

	return

	bld(rule='touch ${TGT}', target='aaa')
	t = bld(rule='touch ${TGT}', target='bbb', source='aaa')
	t.create_task('foo')

	bld.install_files('/tmp/bar', 'wscript')


def init(self):
	print('init')

def shutdown(self):
	print('shutdown')

def bar(ctx):
	print("command ok")

import Task

# TODO update_outputs is a decorator too .. now
@Task.always_run
class foo_task(Task.Task):
	def run(self):
		print("running foo")

print("classes", Task.TaskBase.classes)

#-----------------------------------------------
# variant example below
# call "../waf debug"
#

import os
import Build, Constants, Options
from Base import command_context

@command_context('debug', 'build')
class debug_context(Build.BuildContext):
	def __init__(self, start=None):
		self.cache_dir = Options.out_dir + os.sep + Constants.CACHE_DIR
		self.out_dir = Options.out_dir + os.sep + 'test'
		Build.BuildContext.__init__(self, start=start)

# looks evil
#def debug(bld):
#	build(bld)

